import sys
import os

#This library should be used only with files from the eurostat bulk download facility

#addMissingYears : this function makes a copy of a file and add missing years if needed
def addMissingYears(inputFileName, outputFileName) :
    try :
        inputFile = open(inputFileName, 'r')
    except :
        print('invalid input file : this may mean the input file does not exist or you are not allowed to read it')
        sys.exit()
    try :
        outputFile = open(outputFileName, 'w')
    except :
        print('invalid output file : this may mean the folder does not exist or you are not allowed to write in it')
        inputFile.close()
        sys.exit()
    
    curLine = inputFile.readline().split('\t')
    listYear = map(str.strip, curLine)
    del listYear[0]
    listYear = map(int, listYear) #listYear contains the years listed in the file
    
    indexCorrection = 0 #indexCorrection is necessary if there are more than one year missing
    indexToAdd = []
    yearToAdd = []
    
    for index, year in enumerate(listYear) :
        try: #this try should only fail on the first iteration of the loop (when formYear is not set yet)
            gap = formYear - year
            for curGap in range(gap-1, 0, -1) : #the years are ordered from the higher to the lower in the files
                yearToAdd.append(year + curGap)
                indexToAdd.append(index + indexCorrection)
                indexCorrection += 1
        except:
            pass
        
        formYear = year
    
    for index, year in enumerate(yearToAdd) : #this inserts missing years in the list
        listYear.insert(indexToAdd[index], year)
    
    lineToWrite = curLine[0] + '\t'  #this writes the first line of the file which contains the headers
    for year in listYear : 
        lineToWrite = lineToWrite + str(year) + '\t'
    lineToWrite = lineToWrite[0:-1] + '\n'
    outputFile.write(lineToWrite)

    indexToAdd = [x+1 for x in indexToAdd] #update of the indexToAdd because the previous one was not taking into account the metadata column

    for line in inputFile : #this rewrites and format correctly the entire file
        line = line.strip('\n')
        curLine = line.split('\t')
        
        for index in indexToAdd :
            curLine.insert(index, ':') #this adds the eurostat symbol for missing data where the years have been added
        
        lineToWrite = ''    
        for item in curLine :
            lineToWrite = lineToWrite + item + '\t'            
        lineToWrite = lineToWrite[0:-1] + '\n'
        outputFile.write(lineToWrite)
    
    inputFile.close()
    outputFile.close()

#compileFiles : this function compile different file with the same structure into one big file
#the first parameter is a list containing the full path to the files, usually generated by glob.glob
def compileFiles(inputFileNames, outputFileName) :
    try :
        outputFile = open(outputFileName, 'w')
    except :
        print('invalid output file : this may mean the folder does not exist or you are not allowed to write in it')
        sys.exit()
    
    compiledDic = dict()
    compiledListYear = set()
    
    for inputFileName in inputFileNames :
        try :
            inputFile = open(inputFileName, 'r')
        except :
            print('invalid input file (' + inputFileName + ') : this may mean the input file does not exist or you are not allowed to read it')
            outputFile.close()
            sys.exit()
            
        curLine = inputFile.readline().split('\t')
        
        try :
            if curLine[0] != metadataHeader : #if the files have different from one to another this function does not make sense so there is no need to continue
                print('the structure seems different from one file to the other, the result cannot be produced')
                outputFile.close()
                inputFile.close()
                sys.exit()
        except :
            metadataHeader = curLine[0]
        
        listYear = map(str.strip, curLine)
        del listYear[0]
        
        compiledListYear = compiledListYear.union(set(listYear)) #putting years in a set is a simple way to get rid of the duplicates on the fly
        
        for line in inputFile :
            line = line.strip('\n')
            curLine = line.split('\t')
            curMeta = curLine[0].strip()
            del curLine[0]
            
            if curMeta not in compiledDic : #there is no need to be specific the key can be the full string containing the metadata
                compiledDic[curMeta] = {}
            curDicPointer = compiledDic[curMeta]
            
            for index, item in enumerate(curLine) : #to compile info from different files, each piece of data is assigned to its year
                if listYear[index] in curDicPointer :
                    if any(char.isdigit() for char in item.strip()) : #if an item is empty in a file (:) but there is already something for this specific item in the dictionnary, it is probably better to not replace it
                        curDicPointer[listYear[index]] = item.strip()
                else :
                    curDicPointer[listYear[index]] = item.strip()
        
        inputFile.close()   
        
    compiledListYear = list(compiledListYear) #the sets of year changed back to a list and sorted descending to fit the eurostat structure
    compiledListYear.sort(reverse=True)
    
    lineToWrite = metadataHeader + '\t'
    for index, year in enumerate(compiledListYear) :
        lineToWrite = lineToWrite + year + '\t'
    lineToWrite = lineToWrite[0:-1] + '\n'
    outputFile.write(lineToWrite)
    
    for metadata in compiledDic :
        lineToWrite = metadata + '\t'
        for year in compiledListYear :
            try :
                lineToWrite = lineToWrite + compiledDic[metadata][year] + '\t'
            except :
                lineToWrite = lineToWrite + ':\t'
        lineToWrite = lineToWrite[0:-1] + '\n'
        outputFile.write(lineToWrite)
    
    outputFile.close()
    
def compileAndAddMissingYears(inputFileNames, outputFileName) :
    dotIndex = outputFileName.rfind('.')
    tmpFileName = outputFileName[0:dotIndex+1] + 'tmp'
    
    compileFiles(inputFileNames, tmpFileName)
    addMissingYears(tmpFileName, outputFileName)
    
    os.remove(tmpFileName)

#filterFile : this function rewrite a file keeping only the lines where the param appears
#the third parameter param is the param of the filter, it can be a simple string or a list of parameter, in this case all the param must be in the line (it is an AND not an OR)
def filterFile(inputFileName, outputFileName, param) :
    if type(param) is not list :
        return filterFile(inputFileName, outputFileName, [param])
    
    try :
        inputFile = open(inputFileName, 'r')
    except :
        print('invalid input file : this may mean the input file does not exist or you are not allowed to read it')
        sys.exit()
    try :
        outputFile = open(outputFileName, 'w')
    except :
        print('invalid output file : this may mean the folder does not exist or you are not allowed to write in it')
        inputFile.close()
        sys.exit()
    
    line = inputFile.readline()
    outputFile.write(line)
    
    for line in inputFile :
        ok = True
        for item in param :
            if line.find(item) == -1 :#once one of the parameter is not matched there no need to go further, the line shouldn't be copied
                ok = False
                break
        if ok :
            outputFile.write(line)
          
    inputFile.close()
    outputFile.close()
            
    
    